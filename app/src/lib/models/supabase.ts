/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/course_user": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.course_user.id"];
          course?: parameters["rowFilter.course_user.course"];
          user_id?: parameters["rowFilter.course_user.user_id"];
          created_at?: parameters["rowFilter.course_user.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["course_user"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** course_user */
          course_user?: definitions["course_user"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.course_user.id"];
          course?: parameters["rowFilter.course_user.course"];
          user_id?: parameters["rowFilter.course_user.user_id"];
          created_at?: parameters["rowFilter.course_user.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.course_user.id"];
          course?: parameters["rowFilter.course_user.course"];
          user_id?: parameters["rowFilter.course_user.user_id"];
          created_at?: parameters["rowFilter.course_user.created_at"];
        };
        body: {
          /** course_user */
          course_user?: definitions["course_user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/courses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          description?: parameters["rowFilter.courses.description"];
          owner?: parameters["rowFilter.courses.owner"];
          created_at?: parameters["rowFilter.courses.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["courses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** courses */
          courses?: definitions["courses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          description?: parameters["rowFilter.courses.description"];
          owner?: parameters["rowFilter.courses.owner"];
          created_at?: parameters["rowFilter.courses.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          description?: parameters["rowFilter.courses.description"];
          owner?: parameters["rowFilter.courses.owner"];
          created_at?: parameters["rowFilter.courses.created_at"];
        };
        body: {
          /** courses */
          courses?: definitions["courses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/invite_codes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invite_codes.id"];
          code?: parameters["rowFilter.invite_codes.code"];
          course?: parameters["rowFilter.invite_codes.course"];
          owner?: parameters["rowFilter.invite_codes.owner"];
          valid_until?: parameters["rowFilter.invite_codes.valid_until"];
          created_at?: parameters["rowFilter.invite_codes.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["invite_codes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** invite_codes */
          invite_codes?: definitions["invite_codes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invite_codes.id"];
          code?: parameters["rowFilter.invite_codes.code"];
          course?: parameters["rowFilter.invite_codes.course"];
          owner?: parameters["rowFilter.invite_codes.owner"];
          valid_until?: parameters["rowFilter.invite_codes.valid_until"];
          created_at?: parameters["rowFilter.invite_codes.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invite_codes.id"];
          code?: parameters["rowFilter.invite_codes.code"];
          course?: parameters["rowFilter.invite_codes.course"];
          owner?: parameters["rowFilter.invite_codes.owner"];
          valid_until?: parameters["rowFilter.invite_codes.valid_until"];
          created_at?: parameters["rowFilter.invite_codes.created_at"];
        };
        body: {
          /** invite_codes */
          invite_codes?: definitions["invite_codes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/members": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.members.id"];
          course?: parameters["rowFilter.members.course"];
          user_id?: parameters["rowFilter.members.user_id"];
          first_name?: parameters["rowFilter.members.first_name"];
          last_name?: parameters["rowFilter.members.last_name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["members"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/open_answer_likes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_likes.id"];
          open_answer?: parameters["rowFilter.open_answer_likes.open_answer"];
          owner?: parameters["rowFilter.open_answer_likes.owner"];
          created_at?: parameters["rowFilter.open_answer_likes.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_answer_likes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_answer_likes */
          open_answer_likes?: definitions["open_answer_likes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_likes.id"];
          open_answer?: parameters["rowFilter.open_answer_likes.open_answer"];
          owner?: parameters["rowFilter.open_answer_likes.owner"];
          created_at?: parameters["rowFilter.open_answer_likes.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_likes.id"];
          open_answer?: parameters["rowFilter.open_answer_likes.open_answer"];
          owner?: parameters["rowFilter.open_answer_likes.owner"];
          created_at?: parameters["rowFilter.open_answer_likes.created_at"];
        };
        body: {
          /** open_answer_likes */
          open_answer_likes?: definitions["open_answer_likes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_answer_performances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_performances.id"];
          open_answer_id?: parameters["rowFilter.open_answer_performances.open_answer_id"];
          answer_text?: parameters["rowFilter.open_answer_performances.answer_text"];
          created_at?: parameters["rowFilter.open_answer_performances.created_at"];
          likes?: parameters["rowFilter.open_answer_performances.likes"];
          question_text?: parameters["rowFilter.open_answer_performances.question_text"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_answer_performances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/open_answers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answers.id"];
          open_question?: parameters["rowFilter.open_answers.open_question"];
          created_at?: parameters["rowFilter.open_answers.created_at"];
          answer_text?: parameters["rowFilter.open_answers.answer_text"];
          /** Incremented for the new row if the user improves his answer. */
          version?: parameters["rowFilter.open_answers.version"];
          owner?: parameters["rowFilter.open_answers.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_answers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_answers */
          open_answers?: definitions["open_answers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answers.id"];
          open_question?: parameters["rowFilter.open_answers.open_question"];
          created_at?: parameters["rowFilter.open_answers.created_at"];
          answer_text?: parameters["rowFilter.open_answers.answer_text"];
          /** Incremented for the new row if the user improves his answer. */
          version?: parameters["rowFilter.open_answers.version"];
          owner?: parameters["rowFilter.open_answers.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answers.id"];
          open_question?: parameters["rowFilter.open_answers.open_question"];
          created_at?: parameters["rowFilter.open_answers.created_at"];
          answer_text?: parameters["rowFilter.open_answers.answer_text"];
          /** Incremented for the new row if the user improves his answer. */
          version?: parameters["rowFilter.open_answers.version"];
          owner?: parameters["rowFilter.open_answers.owner"];
        };
        body: {
          /** open_answers */
          open_answers?: definitions["open_answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_feedback": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback.id"];
          open_answer?: parameters["rowFilter.open_feedback.open_answer"];
          created_at?: parameters["rowFilter.open_feedback.created_at"];
          feedback_text?: parameters["rowFilter.open_feedback.feedback_text"];
          owner?: parameters["rowFilter.open_feedback.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_feedback */
          open_feedback?: definitions["open_feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback.id"];
          open_answer?: parameters["rowFilter.open_feedback.open_answer"];
          created_at?: parameters["rowFilter.open_feedback.created_at"];
          feedback_text?: parameters["rowFilter.open_feedback.feedback_text"];
          owner?: parameters["rowFilter.open_feedback.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback.id"];
          open_answer?: parameters["rowFilter.open_feedback.open_answer"];
          created_at?: parameters["rowFilter.open_feedback.created_at"];
          feedback_text?: parameters["rowFilter.open_feedback.feedback_text"];
          owner?: parameters["rowFilter.open_feedback.owner"];
        };
        body: {
          /** open_feedback */
          open_feedback?: definitions["open_feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_feedback_performances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback_performances.id"];
          open_feedback_id?: parameters["rowFilter.open_feedback_performances.open_feedback_id"];
          feedback_text?: parameters["rowFilter.open_feedback_performances.feedback_text"];
          created_at?: parameters["rowFilter.open_feedback_performances.created_at"];
          answer_text?: parameters["rowFilter.open_feedback_performances.answer_text"];
          question_text?: parameters["rowFilter.open_feedback_performances.question_text"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_feedback_performances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/open_question_likes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_likes.id"];
          open_question?: parameters["rowFilter.open_question_likes.open_question"];
          owner?: parameters["rowFilter.open_question_likes.owner"];
          created_at?: parameters["rowFilter.open_question_likes.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_question_likes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_question_likes */
          open_question_likes?: definitions["open_question_likes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_likes.id"];
          open_question?: parameters["rowFilter.open_question_likes.open_question"];
          owner?: parameters["rowFilter.open_question_likes.owner"];
          created_at?: parameters["rowFilter.open_question_likes.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_likes.id"];
          open_question?: parameters["rowFilter.open_question_likes.open_question"];
          owner?: parameters["rowFilter.open_question_likes.owner"];
          created_at?: parameters["rowFilter.open_question_likes.created_at"];
        };
        body: {
          /** open_question_likes */
          open_question_likes?: definitions["open_question_likes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_question_performances": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_performances.id"];
          open_question_id?: parameters["rowFilter.open_question_performances.open_question_id"];
          question_text?: parameters["rowFilter.open_question_performances.question_text"];
          created_at?: parameters["rowFilter.open_question_performances.created_at"];
          likes?: parameters["rowFilter.open_question_performances.likes"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_question_performances"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/open_question_topic": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_topic.id"];
          open_question?: parameters["rowFilter.open_question_topic.open_question"];
          topic?: parameters["rowFilter.open_question_topic.topic"];
          created_at?: parameters["rowFilter.open_question_topic.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_question_topic"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_question_topic */
          open_question_topic?: definitions["open_question_topic"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_topic.id"];
          open_question?: parameters["rowFilter.open_question_topic.open_question"];
          topic?: parameters["rowFilter.open_question_topic.topic"];
          created_at?: parameters["rowFilter.open_question_topic.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_topic.id"];
          open_question?: parameters["rowFilter.open_question_topic.open_question"];
          topic?: parameters["rowFilter.open_question_topic.topic"];
          created_at?: parameters["rowFilter.open_question_topic.created_at"];
        };
        body: {
          /** open_question_topic */
          open_question_topic?: definitions["open_question_topic"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          university?: parameters["rowFilter.profiles.university"];
          user_id?: parameters["rowFilter.profiles.user_id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          university?: parameters["rowFilter.profiles.university"];
          user_id?: parameters["rowFilter.profiles.user_id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          first_name?: parameters["rowFilter.profiles.first_name"];
          last_name?: parameters["rowFilter.profiles.last_name"];
          university?: parameters["rowFilter.profiles.university"];
          user_id?: parameters["rowFilter.profiles.user_id"];
          created_at?: parameters["rowFilter.profiles.created_at"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/progresses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.progresses.id"];
          course_user?: parameters["rowFilter.progresses.course_user"];
          percentage?: parameters["rowFilter.progresses.percentage"];
          created_at?: parameters["rowFilter.progresses.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["progresses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** progresses */
          progresses?: definitions["progresses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.progresses.id"];
          course_user?: parameters["rowFilter.progresses.course_user"];
          percentage?: parameters["rowFilter.progresses.percentage"];
          created_at?: parameters["rowFilter.progresses.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.progresses.id"];
          course_user?: parameters["rowFilter.progresses.course_user"];
          percentage?: parameters["rowFilter.progresses.percentage"];
          created_at?: parameters["rowFilter.progresses.created_at"];
        };
        body: {
          /** progresses */
          progresses?: definitions["progresses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/questions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          course?: parameters["rowFilter.questions.course"];
          created_at?: parameters["rowFilter.questions.created_at"];
          question_text?: parameters["rowFilter.questions.question_text"];
          owner?: parameters["rowFilter.questions.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          course?: parameters["rowFilter.questions.course"];
          created_at?: parameters["rowFilter.questions.created_at"];
          question_text?: parameters["rowFilter.questions.question_text"];
          owner?: parameters["rowFilter.questions.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          course?: parameters["rowFilter.questions.course"];
          created_at?: parameters["rowFilter.questions.created_at"];
          question_text?: parameters["rowFilter.questions.question_text"];
          owner?: parameters["rowFilter.questions.owner"];
        };
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/test_tokens": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_tokens.id"];
          email?: parameters["rowFilter.test_tokens.email"];
          refresh_token?: parameters["rowFilter.test_tokens.refresh_token"];
          created_at?: parameters["rowFilter.test_tokens.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["test_tokens"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** test_tokens */
          test_tokens?: definitions["test_tokens"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_tokens.id"];
          email?: parameters["rowFilter.test_tokens.email"];
          refresh_token?: parameters["rowFilter.test_tokens.refresh_token"];
          created_at?: parameters["rowFilter.test_tokens.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.test_tokens.id"];
          email?: parameters["rowFilter.test_tokens.email"];
          refresh_token?: parameters["rowFilter.test_tokens.refresh_token"];
          created_at?: parameters["rowFilter.test_tokens.created_at"];
        };
        body: {
          /** test_tokens */
          test_tokens?: definitions["test_tokens"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/topics": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.topics.id"];
          name?: parameters["rowFilter.topics.name"];
          course?: parameters["rowFilter.topics.course"];
          created_at?: parameters["rowFilter.topics.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["topics"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** topics */
          topics?: definitions["topics"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.topics.id"];
          name?: parameters["rowFilter.topics.name"];
          course?: parameters["rowFilter.topics.course"];
          created_at?: parameters["rowFilter.topics.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.topics.id"];
          name?: parameters["rowFilter.topics.name"];
          course?: parameters["rowFilter.topics.course"];
          created_at?: parameters["rowFilter.topics.created_at"];
        };
        body: {
          /** topics */
          topics?: definitions["topics"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/universities": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.universities.id"];
          created_at?: parameters["rowFilter.universities.created_at"];
          name?: parameters["rowFilter.universities.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["universities"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** universities */
          universities?: definitions["universities"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.universities.id"];
          created_at?: parameters["rowFilter.universities.created_at"];
          name?: parameters["rowFilter.universities.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.universities.id"];
          created_at?: parameters["rowFilter.universities.created_at"];
          name?: parameters["rowFilter.universities.name"];
        };
        body: {
          /** universities */
          universities?: definitions["universities"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/fetch_my_courses": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            user_id_input: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/join_course": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            invite_code_input: string;
            /** Format: uuid */
            user_id_input: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  course_user: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  courses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    description: string;
    /** Format: uuid */
    owner: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  invite_codes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    code: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course: string;
    /** Format: uuid */
    owner: string;
    /** Format: timestamp without time zone */
    valid_until: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  members: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course?: string;
    /** Format: uuid */
    user_id?: string;
    /** Format: text */
    first_name?: string;
    /** Format: text */
    last_name?: string;
  };
  open_answer_likes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_answers.id`.<fk table='open_answers' column='id'/>
     */
    open_answer: string;
    /** Format: uuid */
    owner: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  open_answer_performances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    open_answer_id?: string;
    /** Format: text */
    answer_text?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: bigint */
    likes?: number;
    /** Format: text */
    question_text?: string;
  };
  open_answers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `questions.id`.<fk table='questions' column='id'/>
     */
    open_question: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    answer_text: string;
    /**
     * Format: bigint
     * @description Incremented for the new row if the user improves his answer.
     */
    version: number;
    /** Format: uuid */
    owner: string;
  };
  open_feedback: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_answers.id`.<fk table='open_answers' column='id'/>
     */
    open_answer: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    feedback_text: string;
    /** Format: uuid */
    owner: string;
  };
  open_feedback_performances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    open_feedback_id?: string;
    /** Format: text */
    feedback_text?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: text */
    answer_text?: string;
    /** Format: text */
    question_text?: string;
  };
  open_question_likes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `questions.id`.<fk table='questions' column='id'/>
     */
    open_question: string;
    /** Format: uuid */
    owner: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  open_question_performances: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    open_question_id?: string;
    /** Format: text */
    question_text?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: bigint */
    likes?: number;
  };
  open_question_topic: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `questions.id`.<fk table='questions' column='id'/>
     */
    open_question: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `topics.id`.<fk table='topics' column='id'/>
     */
    topic: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    first_name: string;
    /** Format: text */
    last_name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `universities.id`.<fk table='universities' column='id'/>
     */
    university: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  progresses: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: uuid */
    course_user: string;
    /** Format: smallint */
    percentage: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  questions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    question_text: string;
    /** Format: uuid */
    owner: string;
  };
  /** @description Used to sync refresh_tokens for cypress tests */
  test_tokens: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    email: string;
    /** Format: text */
    refresh_token?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  topics: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    course: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  universities: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description course_user */
  "body.course_user": definitions["course_user"];
  /** Format: uuid */
  "rowFilter.course_user.id": string;
  /** Format: uuid */
  "rowFilter.course_user.course": string;
  /** Format: uuid */
  "rowFilter.course_user.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.course_user.created_at": string;
  /** @description courses */
  "body.courses": definitions["courses"];
  /** Format: uuid */
  "rowFilter.courses.id": string;
  /** Format: text */
  "rowFilter.courses.description": string;
  /** Format: uuid */
  "rowFilter.courses.owner": string;
  /** Format: timestamp with time zone */
  "rowFilter.courses.created_at": string;
  /** @description invite_codes */
  "body.invite_codes": definitions["invite_codes"];
  /** Format: uuid */
  "rowFilter.invite_codes.id": string;
  /** Format: text */
  "rowFilter.invite_codes.code": string;
  /** Format: uuid */
  "rowFilter.invite_codes.course": string;
  /** Format: uuid */
  "rowFilter.invite_codes.owner": string;
  /** Format: timestamp without time zone */
  "rowFilter.invite_codes.valid_until": string;
  /** Format: timestamp with time zone */
  "rowFilter.invite_codes.created_at": string;
  /** @description members */
  "body.members": definitions["members"];
  /** Format: uuid */
  "rowFilter.members.id": string;
  /** Format: uuid */
  "rowFilter.members.course": string;
  /** Format: uuid */
  "rowFilter.members.user_id": string;
  /** Format: text */
  "rowFilter.members.first_name": string;
  /** Format: text */
  "rowFilter.members.last_name": string;
  /** @description open_answer_likes */
  "body.open_answer_likes": definitions["open_answer_likes"];
  /** Format: uuid */
  "rowFilter.open_answer_likes.id": string;
  /** Format: uuid */
  "rowFilter.open_answer_likes.open_answer": string;
  /** Format: uuid */
  "rowFilter.open_answer_likes.owner": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_answer_likes.created_at": string;
  /** @description open_answer_performances */
  "body.open_answer_performances": definitions["open_answer_performances"];
  /** Format: uuid */
  "rowFilter.open_answer_performances.id": string;
  /** Format: uuid */
  "rowFilter.open_answer_performances.open_answer_id": string;
  /** Format: text */
  "rowFilter.open_answer_performances.answer_text": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_answer_performances.created_at": string;
  /** Format: bigint */
  "rowFilter.open_answer_performances.likes": string;
  /** Format: text */
  "rowFilter.open_answer_performances.question_text": string;
  /** @description open_answers */
  "body.open_answers": definitions["open_answers"];
  /** Format: uuid */
  "rowFilter.open_answers.id": string;
  /** Format: uuid */
  "rowFilter.open_answers.open_question": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_answers.created_at": string;
  /** Format: text */
  "rowFilter.open_answers.answer_text": string;
  /**
   * Format: bigint
   * @description Incremented for the new row if the user improves his answer.
   */
  "rowFilter.open_answers.version": string;
  /** Format: uuid */
  "rowFilter.open_answers.owner": string;
  /** @description open_feedback */
  "body.open_feedback": definitions["open_feedback"];
  /** Format: uuid */
  "rowFilter.open_feedback.id": string;
  /** Format: uuid */
  "rowFilter.open_feedback.open_answer": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_feedback.created_at": string;
  /** Format: text */
  "rowFilter.open_feedback.feedback_text": string;
  /** Format: uuid */
  "rowFilter.open_feedback.owner": string;
  /** @description open_feedback_performances */
  "body.open_feedback_performances": definitions["open_feedback_performances"];
  /** Format: uuid */
  "rowFilter.open_feedback_performances.id": string;
  /** Format: uuid */
  "rowFilter.open_feedback_performances.open_feedback_id": string;
  /** Format: text */
  "rowFilter.open_feedback_performances.feedback_text": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_feedback_performances.created_at": string;
  /** Format: text */
  "rowFilter.open_feedback_performances.answer_text": string;
  /** Format: text */
  "rowFilter.open_feedback_performances.question_text": string;
  /** @description open_question_likes */
  "body.open_question_likes": definitions["open_question_likes"];
  /** Format: uuid */
  "rowFilter.open_question_likes.id": string;
  /** Format: uuid */
  "rowFilter.open_question_likes.open_question": string;
  /** Format: uuid */
  "rowFilter.open_question_likes.owner": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_question_likes.created_at": string;
  /** @description open_question_performances */
  "body.open_question_performances": definitions["open_question_performances"];
  /** Format: uuid */
  "rowFilter.open_question_performances.id": string;
  /** Format: uuid */
  "rowFilter.open_question_performances.open_question_id": string;
  /** Format: text */
  "rowFilter.open_question_performances.question_text": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_question_performances.created_at": string;
  /** Format: bigint */
  "rowFilter.open_question_performances.likes": string;
  /** @description open_question_topic */
  "body.open_question_topic": definitions["open_question_topic"];
  /** Format: uuid */
  "rowFilter.open_question_topic.id": string;
  /** Format: uuid */
  "rowFilter.open_question_topic.open_question": string;
  /** Format: uuid */
  "rowFilter.open_question_topic.topic": string;
  /** Format: timestamp with time zone */
  "rowFilter.open_question_topic.created_at": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: text */
  "rowFilter.profiles.first_name": string;
  /** Format: text */
  "rowFilter.profiles.last_name": string;
  /** Format: uuid */
  "rowFilter.profiles.university": string;
  /** Format: uuid */
  "rowFilter.profiles.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.created_at": string;
  /** @description progresses */
  "body.progresses": definitions["progresses"];
  /** Format: uuid */
  "rowFilter.progresses.id": string;
  /** Format: uuid */
  "rowFilter.progresses.course_user": string;
  /** Format: smallint */
  "rowFilter.progresses.percentage": string;
  /** Format: timestamp with time zone */
  "rowFilter.progresses.created_at": string;
  /** @description questions */
  "body.questions": definitions["questions"];
  /** Format: uuid */
  "rowFilter.questions.id": string;
  /** Format: uuid */
  "rowFilter.questions.course": string;
  /** Format: timestamp with time zone */
  "rowFilter.questions.created_at": string;
  /** Format: text */
  "rowFilter.questions.question_text": string;
  /** Format: uuid */
  "rowFilter.questions.owner": string;
  /** @description test_tokens */
  "body.test_tokens": definitions["test_tokens"];
  /** Format: bigint */
  "rowFilter.test_tokens.id": string;
  /** Format: text */
  "rowFilter.test_tokens.email": string;
  /** Format: text */
  "rowFilter.test_tokens.refresh_token": string;
  /** Format: timestamp with time zone */
  "rowFilter.test_tokens.created_at": string;
  /** @description topics */
  "body.topics": definitions["topics"];
  /** Format: uuid */
  "rowFilter.topics.id": string;
  /** Format: text */
  "rowFilter.topics.name": string;
  /** Format: uuid */
  "rowFilter.topics.course": string;
  /** Format: timestamp with time zone */
  "rowFilter.topics.created_at": string;
  /** @description universities */
  "body.universities": definitions["universities"];
  /** Format: uuid */
  "rowFilter.universities.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.universities.created_at": string;
  /** Format: text */
  "rowFilter.universities.name": string;
}

export interface operations {}

export interface external {}
