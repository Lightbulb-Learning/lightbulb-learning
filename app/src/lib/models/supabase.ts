/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/challenge_pools": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.challenge_pools.id"];
          description?: parameters["rowFilter.challenge_pools.description"];
          owner?: parameters["rowFilter.challenge_pools.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["challenge_pools"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** challenge_pools */
          challenge_pools?: definitions["challenge_pools"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.challenge_pools.id"];
          description?: parameters["rowFilter.challenge_pools.description"];
          owner?: parameters["rowFilter.challenge_pools.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.challenge_pools.id"];
          description?: parameters["rowFilter.challenge_pools.description"];
          owner?: parameters["rowFilter.challenge_pools.owner"];
        };
        body: {
          /** challenge_pools */
          challenge_pools?: definitions["challenge_pools"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_answer_drafts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_drafts.id"];
          answer_text?: parameters["rowFilter.open_answer_drafts.answer_text"];
          open_question?: parameters["rowFilter.open_answer_drafts.open_question"];
          owner?: parameters["rowFilter.open_answer_drafts.owner"];
          original_open_answer?: parameters["rowFilter.open_answer_drafts.original_open_answer"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_answer_drafts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_answer_drafts */
          open_answer_drafts?: definitions["open_answer_drafts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_drafts.id"];
          answer_text?: parameters["rowFilter.open_answer_drafts.answer_text"];
          open_question?: parameters["rowFilter.open_answer_drafts.open_question"];
          owner?: parameters["rowFilter.open_answer_drafts.owner"];
          original_open_answer?: parameters["rowFilter.open_answer_drafts.original_open_answer"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answer_drafts.id"];
          answer_text?: parameters["rowFilter.open_answer_drafts.answer_text"];
          open_question?: parameters["rowFilter.open_answer_drafts.open_question"];
          owner?: parameters["rowFilter.open_answer_drafts.owner"];
          original_open_answer?: parameters["rowFilter.open_answer_drafts.original_open_answer"];
        };
        body: {
          /** open_answer_drafts */
          open_answer_drafts?: definitions["open_answer_drafts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_answers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answers.id"];
          answer_text?: parameters["rowFilter.open_answers.answer_text"];
          /** Incremented for the new row if the user improves his answer. */
          version?: parameters["rowFilter.open_answers.version"];
          open_question?: parameters["rowFilter.open_answers.open_question"];
          owner?: parameters["rowFilter.open_answers.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_answers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_answers */
          open_answers?: definitions["open_answers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answers.id"];
          answer_text?: parameters["rowFilter.open_answers.answer_text"];
          /** Incremented for the new row if the user improves his answer. */
          version?: parameters["rowFilter.open_answers.version"];
          open_question?: parameters["rowFilter.open_answers.open_question"];
          owner?: parameters["rowFilter.open_answers.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_answers.id"];
          answer_text?: parameters["rowFilter.open_answers.answer_text"];
          /** Incremented for the new row if the user improves his answer. */
          version?: parameters["rowFilter.open_answers.version"];
          open_question?: parameters["rowFilter.open_answers.open_question"];
          owner?: parameters["rowFilter.open_answers.owner"];
        };
        body: {
          /** open_answers */
          open_answers?: definitions["open_answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_feedback": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback.id"];
          feedback_text?: parameters["rowFilter.open_feedback.feedback_text"];
          open_answer?: parameters["rowFilter.open_feedback.open_answer"];
          owner?: parameters["rowFilter.open_feedback.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_feedback"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_feedback */
          open_feedback?: definitions["open_feedback"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback.id"];
          feedback_text?: parameters["rowFilter.open_feedback.feedback_text"];
          open_answer?: parameters["rowFilter.open_feedback.open_answer"];
          owner?: parameters["rowFilter.open_feedback.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback.id"];
          feedback_text?: parameters["rowFilter.open_feedback.feedback_text"];
          open_answer?: parameters["rowFilter.open_feedback.open_answer"];
          owner?: parameters["rowFilter.open_feedback.owner"];
        };
        body: {
          /** open_feedback */
          open_feedback?: definitions["open_feedback"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_feedback_drafts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback_drafts.id"];
          feedback_text?: parameters["rowFilter.open_feedback_drafts.feedback_text"];
          open_answer?: parameters["rowFilter.open_feedback_drafts.open_answer"];
          owner?: parameters["rowFilter.open_feedback_drafts.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_feedback_drafts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_feedback_drafts */
          open_feedback_drafts?: definitions["open_feedback_drafts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback_drafts.id"];
          feedback_text?: parameters["rowFilter.open_feedback_drafts.feedback_text"];
          open_answer?: parameters["rowFilter.open_feedback_drafts.open_answer"];
          owner?: parameters["rowFilter.open_feedback_drafts.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_feedback_drafts.id"];
          feedback_text?: parameters["rowFilter.open_feedback_drafts.feedback_text"];
          open_answer?: parameters["rowFilter.open_feedback_drafts.open_answer"];
          owner?: parameters["rowFilter.open_feedback_drafts.owner"];
        };
        body: {
          /** open_feedback_drafts */
          open_feedback_drafts?: definitions["open_feedback_drafts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_question_drafts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_drafts.id"];
          question_text?: parameters["rowFilter.open_question_drafts.question_text"];
          answer_text?: parameters["rowFilter.open_question_drafts.answer_text"];
          owner?: parameters["rowFilter.open_question_drafts.owner"];
          challenge_pool?: parameters["rowFilter.open_question_drafts.challenge_pool"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_question_drafts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_question_drafts */
          open_question_drafts?: definitions["open_question_drafts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_drafts.id"];
          question_text?: parameters["rowFilter.open_question_drafts.question_text"];
          answer_text?: parameters["rowFilter.open_question_drafts.answer_text"];
          owner?: parameters["rowFilter.open_question_drafts.owner"];
          challenge_pool?: parameters["rowFilter.open_question_drafts.challenge_pool"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_question_drafts.id"];
          question_text?: parameters["rowFilter.open_question_drafts.question_text"];
          answer_text?: parameters["rowFilter.open_question_drafts.answer_text"];
          owner?: parameters["rowFilter.open_question_drafts.owner"];
          challenge_pool?: parameters["rowFilter.open_question_drafts.challenge_pool"];
        };
        body: {
          /** open_question_drafts */
          open_question_drafts?: definitions["open_question_drafts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/open_questions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_questions.id"];
          question_text?: parameters["rowFilter.open_questions.question_text"];
          challenge_pool?: parameters["rowFilter.open_questions.challenge_pool"];
          owner?: parameters["rowFilter.open_questions.owner"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["open_questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** open_questions */
          open_questions?: definitions["open_questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_questions.id"];
          question_text?: parameters["rowFilter.open_questions.question_text"];
          challenge_pool?: parameters["rowFilter.open_questions.challenge_pool"];
          owner?: parameters["rowFilter.open_questions.owner"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.open_questions.id"];
          question_text?: parameters["rowFilter.open_questions.question_text"];
          challenge_pool?: parameters["rowFilter.open_questions.challenge_pool"];
          owner?: parameters["rowFilter.open_questions.owner"];
        };
        body: {
          /** open_questions */
          open_questions?: definitions["open_questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  challenge_pools: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    description: string;
    /** Format: uuid */
    owner: string;
  };
  open_answer_drafts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    answer_text: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_questions.id`.<fk table='open_questions' column='id'/>
     */
    open_question: string;
    /** Format: uuid */
    owner: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_answers.id`.<fk table='open_answers' column='id'/>
     */
    original_open_answer?: string;
  };
  open_answers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    answer_text: string;
    /**
     * Format: bigint
     * @description Incremented for the new row if the user improves his answer.
     */
    version: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_questions.id`.<fk table='open_questions' column='id'/>
     */
    open_question: string;
    /** Format: uuid */
    owner: string;
  };
  open_feedback: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    feedback_text: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_answers.id`.<fk table='open_answers' column='id'/>
     */
    open_answer: string;
    /** Format: uuid */
    owner: string;
  };
  open_feedback_drafts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    feedback_text: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `open_answers.id`.<fk table='open_answers' column='id'/>
     */
    open_answer: string;
    /** Format: uuid */
    owner: string;
  };
  open_question_drafts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    question_text: string;
    /** Format: text */
    answer_text?: string;
    /** Format: uuid */
    owner: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `challenge_pools.id`.<fk table='challenge_pools' column='id'/>
     */
    challenge_pool: string;
  };
  open_questions: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    question_text: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `challenge_pools.id`.<fk table='challenge_pools' column='id'/>
     */
    challenge_pool: string;
    /** Format: uuid */
    owner: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description challenge_pools */
  "body.challenge_pools": definitions["challenge_pools"];
  /** Format: uuid */
  "rowFilter.challenge_pools.id": string;
  /** Format: text */
  "rowFilter.challenge_pools.description": string;
  /** Format: uuid */
  "rowFilter.challenge_pools.owner": string;
  /** @description open_answer_drafts */
  "body.open_answer_drafts": definitions["open_answer_drafts"];
  /** Format: uuid */
  "rowFilter.open_answer_drafts.id": string;
  /** Format: text */
  "rowFilter.open_answer_drafts.answer_text": string;
  /** Format: uuid */
  "rowFilter.open_answer_drafts.open_question": string;
  /** Format: uuid */
  "rowFilter.open_answer_drafts.owner": string;
  /** Format: uuid */
  "rowFilter.open_answer_drafts.original_open_answer": string;
  /** @description open_answers */
  "body.open_answers": definitions["open_answers"];
  /** Format: uuid */
  "rowFilter.open_answers.id": string;
  /** Format: text */
  "rowFilter.open_answers.answer_text": string;
  /**
   * Format: bigint
   * @description Incremented for the new row if the user improves his answer.
   */
  "rowFilter.open_answers.version": string;
  /** Format: uuid */
  "rowFilter.open_answers.open_question": string;
  /** Format: uuid */
  "rowFilter.open_answers.owner": string;
  /** @description open_feedback */
  "body.open_feedback": definitions["open_feedback"];
  /** Format: uuid */
  "rowFilter.open_feedback.id": string;
  /** Format: text */
  "rowFilter.open_feedback.feedback_text": string;
  /** Format: uuid */
  "rowFilter.open_feedback.open_answer": string;
  /** Format: uuid */
  "rowFilter.open_feedback.owner": string;
  /** @description open_feedback_drafts */
  "body.open_feedback_drafts": definitions["open_feedback_drafts"];
  /** Format: uuid */
  "rowFilter.open_feedback_drafts.id": string;
  /** Format: text */
  "rowFilter.open_feedback_drafts.feedback_text": string;
  /** Format: uuid */
  "rowFilter.open_feedback_drafts.open_answer": string;
  /** Format: uuid */
  "rowFilter.open_feedback_drafts.owner": string;
  /** @description open_question_drafts */
  "body.open_question_drafts": definitions["open_question_drafts"];
  /** Format: uuid */
  "rowFilter.open_question_drafts.id": string;
  /** Format: text */
  "rowFilter.open_question_drafts.question_text": string;
  /** Format: text */
  "rowFilter.open_question_drafts.answer_text": string;
  /** Format: uuid */
  "rowFilter.open_question_drafts.owner": string;
  /** Format: uuid */
  "rowFilter.open_question_drafts.challenge_pool": string;
  /** @description open_questions */
  "body.open_questions": definitions["open_questions"];
  /** Format: uuid */
  "rowFilter.open_questions.id": string;
  /** Format: text */
  "rowFilter.open_questions.question_text": string;
  /** Format: uuid */
  "rowFilter.open_questions.challenge_pool": string;
  /** Format: uuid */
  "rowFilter.open_questions.owner": string;
}

export interface operations {}

export interface external {}
